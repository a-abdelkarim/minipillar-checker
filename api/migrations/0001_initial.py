# Generated by Django 3.0.6 on 2022-04-16 10:06

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=256, unique=True)),
                ('type', models.CharField(choices=[('viewer', 'Viewer'), ('editor', 'User'), ('administrator', 'Administrator')], default='editor', max_length=32)),
                ('title', models.CharField(blank=True, max_length=32, null=True)),
                ('mobile', models.CharField(blank=True, max_length=64, null=True)),
                ('update', models.BooleanField(default=True)),
                ('delete', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted')], default='active', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('items', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255)),
                ('user_type', models.CharField(max_length=50)),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('password', models.CharField(max_length=255)),
                ('dateOfBirth', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=1024, null=True)),
                ('code', models.CharField(blank=True, max_length=4, null=True)),
                ('hardware', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted')], default='active', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'devices',
            },
        ),
        migrations.CreateModel(
            name='MiniPillarFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('file', models.FileField(default='temp/file/nofile.zip', upload_to='temp/file/')),
                ('json_object', models.TextField(max_length=20000)),
                ('username', models.CharField(max_length=50)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'minipillar_file',
            },
        ),
        migrations.CreateModel(
            name='MiniPillar',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
                ('manuf_serial_number', models.CharField(blank=True, max_length=255, null=True)),
                ('miniPillar_type', models.CharField(blank=True, max_length=50, null=True)),
                ('subtype_cd', models.CharField(blank=True, max_length=50, null=True)),
                ('substation_number', models.CharField(blank=True, max_length=50, null=True)),
                ('feeder_number', models.CharField(blank=True, max_length=50, null=True)),
                ('circuits_number', models.CharField(blank=True, max_length=50, null=True)),
                ('used_circuits_number', models.CharField(blank=True, max_length=50, null=True)),
                ('subMiniPilar', models.CharField(blank=True, max_length=50, null=True)),
                ('manuf_code', models.CharField(blank=True, max_length=50, null=True)),
                ('manuf_year', models.CharField(blank=True, max_length=50, null=True)),
                ('image', models.ImageField(default='minipillar/upload/imgs/no_img.png', upload_to='minipillar/upload/imgs/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.CharField(blank=True, max_length=50, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(blank=True, max_length=50, null=True)),
                ('entrance_obstacles', models.CharField(blank=True, max_length=100, null=True)),
                ('equipment_grounding', models.CharField(blank=True, max_length=100, null=True)),
                ('rusted_earthing_connection', models.CharField(blank=True, max_length=100, null=True)),
                ('availability_noDang_signsMono', models.CharField(blank=True, max_length=100, null=True)),
                ('substation_cleanliness', models.CharField(blank=True, max_length=100, null=True)),
                ('equipment_level', models.CharField(blank=True, max_length=100, null=True)),
                ('bumt_marks_sparks', models.CharField(blank=True, max_length=100, null=True)),
                ('oxidation_corrosions', models.CharField(blank=True, max_length=100, null=True)),
                ('dust_foreignDebris', models.CharField(blank=True, max_length=100, null=True)),
                ('connectors_lugs', models.CharField(blank=True, max_length=100, null=True)),
                ('bumt_heatingMarksOnCable', models.CharField(blank=True, max_length=100, null=True)),
                ('urgent_issue', models.CharField(blank=True, max_length=100, null=True)),
                ('urgent_issue_body', models.TextField(blank=True, default='Null', max_length=1000, null=True)),
                ('serious_issue', models.CharField(blank=True, max_length=100, null=True)),
                ('serious_issue_body', models.TextField(blank=True, default='Null', max_length=1000, null=True)),
                ('physicalCondition_dent_damages', models.CharField(blank=True, max_length=20, null=True)),
                ('rust_corrosion_deterioration', models.CharField(blank=True, max_length=20, null=True)),
                ('paint_condition', models.CharField(blank=True, max_length=20, null=True)),
                ('gaps_slots', models.CharField(blank=True, max_length=20, null=True)),
                ('locks_hinges', models.CharField(blank=True, max_length=20, null=True)),
                ('latching_mechanism', models.CharField(blank=True, max_length=20, null=True)),
                ('cracks_damages', models.CharField(blank=True, max_length=20, null=True)),
                ('gaps_unblockCableEntry', models.CharField(blank=True, max_length=20, null=True)),
                ('galvanization_bolts_nuts_screws', models.CharField(blank=True, max_length=20, null=True)),
                ('grounding_bounding', models.CharField(blank=True, max_length=20, null=True)),
                ('access_obstructions', models.CharField(blank=True, max_length=20, null=True)),
                ('numbering_dangerSigns_monogram', models.CharField(blank=True, max_length=20, null=True)),
                ('maintenance_completed', models.CharField(blank=True, max_length=20, null=True)),
                ('minorRepair_made', models.CharField(blank=True, max_length=20, null=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('checked', models.BooleanField(default=False)),
                ('last_check_at', models.DateTimeField(auto_now=True)),
                ('checked_by', models.CharField(blank=True, max_length=100, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Device')),
            ],
            options={
                'db_table': 'minipillars',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Device'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
